services:
  library:
    build:
      context: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    depends_on:
      - db
      - redis
    volumes:
      - ./:/app
    command: >
      sh -c "python manage.py wait_for_db &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - my_db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"

  celery-worker:
    build:
      context: .
    depends_on:
      - redis
      - library
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    command: >
      sh -c "celery -A core worker --loglevel=info --pool=solo"

  celery-beat:
    build:
      context: .
    depends_on:
      - redis
      - library
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    command: >
      sh -c "python manage.py migrate django_celery_beat && celery -A core beat --loglevel=info"

volumes:
  my_db:
